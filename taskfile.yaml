version: "3"

env:
  GOBIN:
    sh: |
      if [[ -z "$(go env GOBIN)" ]]; then
        echo "$(go env GOPATH)/bin"
      else
        echo "$(go env GOBIN)"
      fi

run: when_changed
set:
  - e
  - pipefail

vars:
  IMAGE: '{{ .IMAGE | default "controller-manager" }}'
  tools:
    map:
      controller-gen:
        url: sigs.k8s.io/controller-tools/cmd/controller-gen
        version: 0.18.0
      conversion-gen:
        url: k8s.io/code-generator/cmd/conversion-gen
        version: 0.33.2
      golangci-lint:
        url: github.com/golangci/golangci-lint/v2/cmd/golangci-lint
        version: 2.2.1
      gofumpt:
        url: mvdan.cc/gofumpt
        version: 0.9.1
      golines:
        url: github.com/segmentio/golines
        version: 0.13.0
      kustomize:
        url: sigs.k8s.io/kustomize/kustomize/v5
        version: 5.7.1
      qq:
        url: github.com/JFryy/qq
        version: 0.3.1
  controllerGenCmd: 'go run {{ (index .tools "controller-gen").url }}@v{{ (index .tools "controller-gen").version }}'
  conversionGenCmd: 'go run {{ (index .tools "conversion-gen").url }}@v{{ (index .tools "conversion-gen").version }}'
  golangciLintCmd: 'go run {{ (index .tools "golangci-lint").url }}@v{{ (index .tools "golangci-lint").version }}'
  gofumptCmd: 'go run {{ (index .tools "gofumpt").url }}@v{{ (index .tools "gofumpt").version }}'
  golinesCmd: 'go run {{ (index .tools "golines").url }}@v{{ (index .tools "golines").version }}'
  kustomizeCmd: 'go run {{ (index .tools "kustomize").url }}@v{{ (index .tools "kustomize").version }}'
  qqCmd: 'go run {{ (index .tools "qq").url }}@v{{ (index .tools "qq").version }}'
  buildDir: build
  artifactsDir: _artifacts
  #  TODO: until https://github.com/go-task/task/issues/178 is done
  version:
    sh: git describe --tags 2>/dev/null | awk -F - 'NF==3 {printf("%s-%04d-%s", $1, $2, $3)} NF!=3 {print $1}'

tasks:
  default:
    cmd:
      task: build
  manifests:
    cmds:
      - task: manifest-kustomize
      - mkdir -p {{ .buildDir }}/config
      - rm -f {{ .buildDir }}/config/kustomization.yaml
      - env -C {{ .buildDir }}/config {{ .kustomizeCmd }} create --resources ../../config
      - env -C {{ .buildDir }}/config {{ .kustomizeCmd }} edit set image controller-manager={{ .IMAGE }}
      - "{{ .kustomizeCmd }} build {{ .buildDir }}/config > {{ .buildDir }}/control-plane-components.yaml"
    generates:
      - "{{ .buildDir }}/control-plane-components.yaml"
  generate:
    cmds:
      - task: generate-deepcopy
      - task: generate-conversion
  format:
    deps:
      - clean-files
      - generate
    sources:
      - ./**/*.go
    cmds:
      - "{{ .gofumptCmd }} -w api cmd pkg"
      - "{{ .golinesCmd }} --ignore-generated --ignored-dirs=.go -m 120 -w ."
  lint:
    vars:
      fix: '{{ .fix | default "false" }}'
    deps:
      - artifacts-dir
      - format
    sources:
      - ./**/*.go
      - ./.golangci.yaml
      - ./metadata.yaml
    cmds:
      - "{{ .golangciLintCmd }} run --fix={{ .fix }}"
      - |
        set -x
        declare -a supportedVersions
        mapfile -t supportedVersions <<< "$(sed -n -r 's#^\s+cluster.x-k8s.io/(\S+): \S+#\1#gp' build/crds/controlplane.* | grep -v provider | sort -u)"
        declare -a currentVersion
        mapfile -t currentVersion <<< "$(echo {{ .version }} | sed -r 's#v([^.]+)\.([^.]+)\..*#\1\n\2#g')"
        for version in "${supportedVersions[@]}"; do
          if ! ({{ .qqCmd }} -r ".releaseSeries | map(select(.major == ${currentVersion[0]} and .minor == ${currentVersion[1]}))[0].contract" metadata.yaml | grep -q "$version"); then
            echo "Make sure the current version is set inside the metadata.yaml ðŸ™„" > /dev/stderr
            exit 1
          fi
        done
    generates:
      - ./**/*.go
      - "{{ .artifactsDir }}/golangci-lint.json"
  test:
    label: "test {{ .path }}"
    deps:
      - artifacts-dir
      - generate
      - format
    vars:
      path: '{{ .path | default "." }}'
    sources:
      - ./**/*.go
      - go.sum
    cmd: go test ./{{ .path }}/... -coverprofile {{ .artifactsDir }}/cover.out
    generates:
      - "{{ .artifactsDir }}/cover.out"
  pre-commit:
    cmds:
      - task: compile
      - task: manifests
      - task: test
      - task: lint
      - task: check-diff
  check-diff:
    deps:
      - manifests
      - generate
      - format
    cmd: git diff --exit-code
  clean:
    cmds:
      - buildah manifest rm {{ .IMAGE }} 2>/dev/null || true
      - rm -rf {{ .buildDir }}
      - rm -rf {{ .artifactsDir }}
    status:
      - (! buildah manifest inspect {{ .IMAGE }} 2>/dev/null) || false
      - test ! -d {{ .buildDir }}
      - test ! -d {{ .artifactsDir }}

  compile:
    label: compile {{ .arch }}
    deps:
      - tidy
      - build-dir
      - generate
    sources:
      - ./**/*.go
      - go.sum
      - exclude: pkg/**/*_test.go
    vars:
      arch: '{{ .arch | default ARCH }}'
    env:
      CGO_ENABLED: '0'
      GOARCH: '{{ .arch }}'
      GOOS: linux
    cmd: go build -ldflags="-X=main.version={{ .version }} -s -w" -o {{ .buildDir }}/manager-{{ .arch }} ./cmd/hosted-control-plane-controller/main.go
    generates:
      - "{{ .buildDir }}/manager-{{ .arch }}"
    status:
      - test -x {{ .buildDir }}/manager-{{ .arch }}
  image:
    label: image {{ .arch }}
    deps:
      - compile
    vars:
      arch: '{{ .arch | default ARCH }}'
      oldDigests:
        sh: >-
          (buildah manifest inspect {{ .IMAGE }} 2> /dev/null || echo '{}') | {{ .qqCmd }} -r '.manifests // [] | map(select(.platform.architecture == "{{ .arch }}")) | map(.digest)[]' 2>/dev/null || true
    sources:
      - Containerfile
      - .containerignore
      - "{{ .buildDir }}/manager-{{ .arch }}"
    cmds:
      - for:
          var: oldDigests
        cmd: "buildah manifest remove {{ .IMAGE }} {{ .ITEM }} || true"
      - "buildah build --arch {{ .arch }} --manifest {{ .IMAGE }} --build-arg=manager={{ .buildDir }}/manager-{{ .arch }} ."
    status:
      - "buildah manifest inspect {{ .IMAGE }} | grep -q {{ .arch }}"
  build:
    method: none
    deps:
      - tidy
      - build-dir
      - manifests
      - generate
    sources:
      - ./**/*.go
      - go.sum
    vars:
      archs: "{{ ARCH }},amd64,arm64"
    cmds:
      - for: &forArch
          var: archs
          split: ","
          as: arch
        task: compile
        vars:
          arch: "{{ .arch }}"
      - for: *forArch
        task: image
        vars:
          arch: "{{ .arch }}"
  get-version:
    cmd: echo {{ .version }}
  dev:
    cmd:
      task: telepresence
  _generate-deepcopy:
    label: generate-deepcopy {{ .API }}
    internal: true
    desc: Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations for {{ .API }}.
    deps:
      - tidy
    sources:
      - api/{{ .API }}/*.go
      - exclude: api/{{ .API }}/zz_generated.deepcopy.go
    cmds:
      - '{{ .controllerGenCmd }} object paths="./api/{{ .API }}/..."'
    generates:
      - api/{{ .API }}/zz_generated.deepcopy.go
  generate-deepcopy:
    method: none
    vars:
      APIS:
        sh: find ./api -mindepth 1 -maxdepth 1 -type d | xargs -r basename
    cmds:
      - for:
          var: APIS
        task: _generate-deepcopy
        vars:
          API: "{{ .ITEM }}"
  _generate-conversion:
    internal: true
    label: generate-conversions {{ .API }}
    desc: Generate code containing Conversion method implementations for {{ .API }}.
    deps:
      - tidy
    sources:
      - api/{{ .API }}/*.go
      - exclude: api/{{ .API }}/zz_generated.deepcopy.go
    cmds:
      - cmd: "{{ .conversionGenCmd }} --output-file=zz_generated.conversion.go --go-header-file=/dev/null ./api/{{ .API }}"
    generates:
      - api/{{ .API }}/zz_generated.conversion.go
  generate-conversion:
    method: none
    vars:
      APIS:
        sh: grep -Pl '// \+k8s:conversion-gen=(?!false)' api/*/doc.go 2>/dev/null | xargs -r dirname | xargs -r basename
    cmds:
      - for:
          var: APIS
        task: _generate-conversion
        vars:
          API: "{{ .ITEM }}"

  tidy:
    internal: true
    sources:
      - '**/*.go'
    generates:
      - go.mod
      - go.sum
    cmd: go mod tidy
  clean-files:
    internal: true
    cmd: find -type f -size 0 -name '*.go' -delete
    status:
      - find -type f -size 0 -name '*.go' -exec false {} + -quit
  build-dir:
    internal: true
    cmd: mkdir -p {{ .buildDir }}
    status:
      - test -d {{ .buildDir }}
  artifacts-dir:
    internal: true
    cmd: mkdir -p {{ .artifactsDir }}
    status:
      - test -d {{ .artifactsDir }}
  telepresence:
    internal: true
    interactive: true
    preconditions:
      - command -v kubectl
      - command -v telepresence
      - sh: telepresence version | grep -q v2
      - command -v flux
      - sh: "[[ -L /var/run/secrets ]]"
        msg: "symlink missing: sudo ln -s /tmp/operator/var/run/secrets /var/run/secrets"
      - sh: "grep ^user_allow_other /etc/fuse.conf"
        msg: |
          # add user_allow_other to config file
          visudo /etc/fuse.conf
    requires:
      vars:
        - KUBECONFIG
    env:
      NAMESPACE: capi-hosted-control-plane-manager-system
      DEPLOYMENT_NAME: capi-hosted-control-plane-controller-manager
    # always run the cleanup stuff
    ignore_error: true
    cmds:
      - telepresence helm install -n $NAMESPACE --set agent.securityContext.runAsNonRoot=false --set agent.mountPolicies./tmp=RemoteReadOnly
      - defer: telepresence helm uninstall -n $NAMESPACE
      - telepresence connect --manager-namespace=$NAMESPACE --namespace $NAMESPACE --also-proxy 212.15.209.254/32,212.15.216.1/32
      - defer: sudo pkill telepresence
      - defer: telepresence quit -s
      - telepresence replace $DEPLOYMENT_NAME --port=9443:webhooks --mount /tmp/operator --env-json /tmp/operator-env.json -- sleep infinity
  manifest-rbac:
    internal: true
    desc: Generate RBAC manifests.
    sources:
      - api/**/*.go
      - exclude: api/**/zz_generated.deepcopy.go
      - exclude: api/**/zz_generated.conversion.go
      - pkg/**/*.go
      - exclude: pkg/**/*_test.go
    cmds:
      - "{{ .controllerGenCmd }} rbac:roleName=manager paths=./api/... paths=./pkg/... output:rbac:artifacts:config={{ .buildDir }}/rbac"
    generates:
      - "{{ .buildDir }}/rbac/role.yaml"
  manifest-webhooks:
    internal: true
    desc: Generate WebhookConfiguration manifests.
    sources:
      - api/**/*.go
      - exclude: api/**/zz_generated.deepcopy.go
      - exclude: api/**/zz_generated.conversion.go
      - pkg/**/*.go
      - exclude: pkg/**/*_test.go
    cmds:
      - "{{ .controllerGenCmd }} webhook paths=./api/... paths=./pkg/... output:webhook:artifacts:config={{ .buildDir }}/webhooks"
    generates:
      - "{{ .buildDir }}/webhooks/manifests.yaml"
  manifest-crds:
    internal: true
    desc: Generate CustomResourceDefinition manifests
    sources:
      - api/**/*.go
      - exclude: api/**/zz_generated.deepcopy.go
      - exclude: api/**/zz_generated.conversion.go
      - pkg/**/*.go
      - exclude: pkg/**/*_test.go
    cmds:
      - "{{ .controllerGenCmd }} crd paths=./api/... paths=./pkg/... output:crd:artifacts:config={{ .buildDir }}/crds"
    generates:
      - "{{ .buildDir }}/crds/controlplane.cluster.x-k8s.io_hostedcontrolplanes.yaml"
      - "{{ .buildDir }}/crds/controlplane.cluster.x-k8s.io_hostedcontrolplanetemplates.yaml"
  manifest-kustomize:
    internal: true
    desc: Generate `kustomization.yaml`s for all generated manifests
    deps:
      - manifest-rbac
      - manifest-crds
      - manifest-webhooks
    vars:
      files:
        - "{{ .buildDir }}/rbac"
        - "{{ .buildDir }}/webhooks"
        - "{{ .buildDir }}/crds"
    cmds:
      - for:
          var: files
        cmd: rm -f {{ .ITEM }}/kustomization.yaml
      - for:
          var: files
        cmd: env -C {{ .ITEM }} {{ .kustomizeCmd }} create --autodetect
    generates:
      - "{{ .buildDir }}/*/kustomization.yaml"
